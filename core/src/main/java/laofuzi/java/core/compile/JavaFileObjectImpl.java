 
package laofuzi.java.core.compile;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import javax.tools.SimpleJavaFileObject;

/**
 * 
 *
 */
final class JavaFileObjectImpl extends SimpleJavaFileObject {
	private static String basePath = "/SCRIPT_SOURCE/";
    // If kind == CLASS, this stores byte code from openOutputStream
    private ByteArrayOutputStream byteCode;
    // 存放java源码
    private final CharSequence source;

    JavaFileObjectImpl(final String baseName, final CharSequence source) {
        super(CodeUtils.toURI(basePath + baseName + SourceCodeJavaCompiler.JAVA_EXTENSION), Kind.SOURCE);
        this.source = source;
    }

    JavaFileObjectImpl(final String name, final Kind kind) {
        super(CodeUtils.toURI(name), kind);
        source = null;
    }

    /**
     * 返回java源码
     * 
     * @see javax.tools.SimpleJavaFileObject#getCharContent(boolean)
     */
    @Override
    public CharSequence getCharContent(final boolean ignoreEncodingErrors) throws UnsupportedOperationException {
        if (source == null)
            throw new UnsupportedOperationException("getCharContent()");
        return source;
    }

    /**
     * Return an input stream for reading the byte code
     * 
     * @see javax.tools.SimpleJavaFileObject#openInputStream()
     */
    @Override
    public InputStream openInputStream() {
        return new ByteArrayInputStream(getByteCode());
    }

    /**
     * Return an output stream for writing the bytecode
     * 
     * @see javax.tools.SimpleJavaFileObject#openOutputStream()
     */
    @Override
    public OutputStream openOutputStream() {
        byteCode = new ByteArrayOutputStream();
        return byteCode;
    }

    /**
     * @return the byte code generated by the compiler
     */
    byte[] getByteCode() {
        return byteCode.toByteArray();
    }
}
